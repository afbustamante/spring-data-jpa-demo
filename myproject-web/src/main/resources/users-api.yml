openapi: 3.0.2

info:
  title: Users Administration
  description: Users Registration REST API
  version: 1.0.0

servers:
  - url: http://localhost:8000/api
    description: Localhost deployment

tags:
  - name: users
    description: Users management API. It allows to create, update and delete users

  - name: roles
    description: Roles consultation API. It allows to load and search for the roles available on the application

paths:
  /users:
    post:
      operationId: createUser
      summary: Creates a new user
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserForm'
      responses:
        201: # Created
          description: User succesfully created
        500: # Internal server error
          description: An error occurred while creating the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int64
        description: Technical ID identifying the user
    get:
      operationId: loadUser
      summary: Loads a given user
      tags:
        - users
      responses:
        200: # OK
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        403: # Forbidden
          description: User not allowed to perform this operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404: # Not found
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500: # Internal server error
          description: An error occurred while looking for user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      operationId: updateUser
      summary: Updates a given user
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserForm'
      responses:
        202: # Accepted
          description: User details successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        403: # Forbidden
          description: User not allowed to perform this operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404: # Not found
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500: # Internal server error
          description: An error occurred while looking for user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: deleteUser
      summary: Deletes a given a user
      tags:
        - users
      responses:
        204: # No content
          description: User successfully deleted
        403: # Forbidden
          description: User not allowed to perform this operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404: # Not found
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500: # Internal server error
          description: An error occurred while looking for user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}/roles:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int64
        description: Technical ID identifying the user
    get:
      operationId: loadUserRoles
      summary: Loads the roles for a given user
      tags:
        - users
      responses:
        200: # OK
          description: List of roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        403: # Forbidden
          description: User not allowed to perform this operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404: # Not found
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500: # Internal server error
          description: An error occurred while looking for user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /roles:
    get:
      operationId: loadActiveRoles
      summary: Loads the list of active roles
      tags:
        - roles
      responses:
        200: # OK
          description: List of roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        500: # Internal server error
          description: An error occurred while looking for roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
          format: email
        first_name:
          type: string
        surname:
          type: string
        creation_date:
          type: string
          format: date-time

    UserForm:
      type: object
      properties:
        email:
          type: string
          format: email
        first_name:
          type: string
          pattern: ^[A-Za-z0-9äáàéèëêïíôóöòúûùüÄÁÀÉÈËÊÏÍÔÓÒÚÛÙÜçÇñÑ\'\-]{1,255}$
        surname:
          type: string
          pattern: ^[A-Za-z0-9äáàéèëêïíôóöòúûùüÄÁÀÉÈËÊÏÍÔÓÒÚÛÙÜçÇñÑ\'\-]{1,255}$
      required:
        - email
        - first_name
        - surname

    Role:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    ErrorResponse:
      type: object
      required:
        - timestamp
        - error
        - message
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        path:
          type: string
          format: uri
